/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/devopsext/configurator/pkg/apis/rtcfg/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GenericLister helps list Generics.
// All objects returned here must be treated as read-only.
type GenericLister interface {
	// List lists all Generics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Generic, err error)
	// Generics returns an object that can list and get Generics.
	Generics(namespace string) GenericNamespaceLister
	GenericListerExpansion
}

// genericLister implements the GenericLister interface.
type genericLister struct {
	indexer cache.Indexer
}

// NewGenericLister returns a new GenericLister.
func NewGenericLister(indexer cache.Indexer) GenericLister {
	return &genericLister{indexer: indexer}
}

// List lists all Generics in the indexer.
func (s *genericLister) List(selector labels.Selector) (ret []*v1alpha1.Generic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generic))
	})
	return ret, err
}

// Generics returns an object that can list and get Generics.
func (s *genericLister) Generics(namespace string) GenericNamespaceLister {
	return genericNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenericNamespaceLister helps list and get Generics.
// All objects returned here must be treated as read-only.
type GenericNamespaceLister interface {
	// List lists all Generics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Generic, err error)
	// Get retrieves the Generic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Generic, error)
	GenericNamespaceListerExpansion
}

// genericNamespaceLister implements the GenericNamespaceLister
// interface.
type genericNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Generics in the indexer for a given namespace.
func (s genericNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Generic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generic))
	})
	return ret, err
}

// Get retrieves the Generic from the indexer for a given namespace and name.
func (s genericNamespaceLister) Get(name string) (*v1alpha1.Generic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("generic"), name)
	}
	return obj.(*v1alpha1.Generic), nil
}
